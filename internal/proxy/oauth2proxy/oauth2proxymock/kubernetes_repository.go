// Code generated by mockery v1.0.0. DO NOT EDIT.

package oauth2proxymock

import (
	context "context"

	corev1 "k8s.io/api/core/v1"

	mock "github.com/stretchr/testify/mock"

	networkingv1 "k8s.io/api/networking/v1"

	v1 "k8s.io/api/apps/v1"
)

// KubernetesRepository is an autogenerated mock type for the KubernetesRepository type
type KubernetesRepository struct {
	mock.Mock
}

// DeleteDeployment provides a mock function with given fields: ctx, ns, name
func (_m *KubernetesRepository) DeleteDeployment(ctx context.Context, ns string, name string) error {
	ret := _m.Called(ctx, ns, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, ns, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSecret provides a mock function with given fields: ctx, ns, name
func (_m *KubernetesRepository) DeleteSecret(ctx context.Context, ns string, name string) error {
	ret := _m.Called(ctx, ns, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, ns, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteService provides a mock function with given fields: ctx, ns, name
func (_m *KubernetesRepository) DeleteService(ctx context.Context, ns string, name string) error {
	ret := _m.Called(ctx, ns, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, ns, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EnsureDeployment provides a mock function with given fields: ctx, dep
func (_m *KubernetesRepository) EnsureDeployment(ctx context.Context, dep *v1.Deployment) error {
	ret := _m.Called(ctx, dep)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Deployment) error); ok {
		r0 = rf(ctx, dep)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EnsureSecret provides a mock function with given fields: ctx, sec
func (_m *KubernetesRepository) EnsureSecret(ctx context.Context, sec *corev1.Secret) error {
	ret := _m.Called(ctx, sec)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *corev1.Secret) error); ok {
		r0 = rf(ctx, sec)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EnsureService provides a mock function with given fields: ctx, svc
func (_m *KubernetesRepository) EnsureService(ctx context.Context, svc *corev1.Service) error {
	ret := _m.Called(ctx, svc)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *corev1.Service) error); ok {
		r0 = rf(ctx, svc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetIngress provides a mock function with given fields: ctx, ns, name
func (_m *KubernetesRepository) GetIngress(ctx context.Context, ns string, name string) (*networkingv1.Ingress, error) {
	ret := _m.Called(ctx, ns, name)

	var r0 *networkingv1.Ingress
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *networkingv1.Ingress); ok {
		r0 = rf(ctx, ns, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkingv1.Ingress)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, ns, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateIngress provides a mock function with given fields: ctx, ingress
func (_m *KubernetesRepository) UpdateIngress(ctx context.Context, ingress *networkingv1.Ingress) error {
	ret := _m.Called(ctx, ingress)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkingv1.Ingress) error); ok {
		r0 = rf(ctx, ingress)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
