// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	authv1 "github.com/slok/bilrost/pkg/apis/auth/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeAuthBackends implements AuthBackendInterface
type FakeAuthBackends struct {
	Fake *FakeAuthV1
}

var authbackendsResource = schema.GroupVersionResource{Group: "auth.bilrost.slok.dev", Version: "v1", Resource: "authbackends"}

var authbackendsKind = schema.GroupVersionKind{Group: "auth.bilrost.slok.dev", Version: "v1", Kind: "AuthBackend"}

// Get takes name of the authBackend, and returns the corresponding authBackend object, and an error if there is any.
func (c *FakeAuthBackends) Get(ctx context.Context, name string, options v1.GetOptions) (result *authv1.AuthBackend, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(authbackendsResource, name), &authv1.AuthBackend{})
	if obj == nil {
		return nil, err
	}
	return obj.(*authv1.AuthBackend), err
}

// List takes label and field selectors, and returns the list of AuthBackends that match those selectors.
func (c *FakeAuthBackends) List(ctx context.Context, opts v1.ListOptions) (result *authv1.AuthBackendList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(authbackendsResource, authbackendsKind, opts), &authv1.AuthBackendList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &authv1.AuthBackendList{ListMeta: obj.(*authv1.AuthBackendList).ListMeta}
	for _, item := range obj.(*authv1.AuthBackendList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested authBackends.
func (c *FakeAuthBackends) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(authbackendsResource, opts))
}

// Create takes the representation of a authBackend and creates it.  Returns the server's representation of the authBackend, and an error, if there is any.
func (c *FakeAuthBackends) Create(ctx context.Context, authBackend *authv1.AuthBackend, opts v1.CreateOptions) (result *authv1.AuthBackend, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(authbackendsResource, authBackend), &authv1.AuthBackend{})
	if obj == nil {
		return nil, err
	}
	return obj.(*authv1.AuthBackend), err
}

// Update takes the representation of a authBackend and updates it. Returns the server's representation of the authBackend, and an error, if there is any.
func (c *FakeAuthBackends) Update(ctx context.Context, authBackend *authv1.AuthBackend, opts v1.UpdateOptions) (result *authv1.AuthBackend, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(authbackendsResource, authBackend), &authv1.AuthBackend{})
	if obj == nil {
		return nil, err
	}
	return obj.(*authv1.AuthBackend), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeAuthBackends) UpdateStatus(ctx context.Context, authBackend *authv1.AuthBackend, opts v1.UpdateOptions) (*authv1.AuthBackend, error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateSubresourceAction(authbackendsResource, "status", authBackend), &authv1.AuthBackend{})
	if obj == nil {
		return nil, err
	}
	return obj.(*authv1.AuthBackend), err
}

// Delete takes name of the authBackend and deletes it. Returns an error if one occurs.
func (c *FakeAuthBackends) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteActionWithOptions(authbackendsResource, name, opts), &authv1.AuthBackend{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeAuthBackends) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(authbackendsResource, listOpts)

	_, err := c.Fake.Invokes(action, &authv1.AuthBackendList{})
	return err
}

// Patch applies the patch and returns the patched authBackend.
func (c *FakeAuthBackends) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *authv1.AuthBackend, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(authbackendsResource, name, pt, data, subresources...), &authv1.AuthBackend{})
	if obj == nil {
		return nil, err
	}
	return obj.(*authv1.AuthBackend), err
}
