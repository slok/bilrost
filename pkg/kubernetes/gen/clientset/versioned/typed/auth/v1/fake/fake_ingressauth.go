// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	authv1 "github.com/slok/bilrost/pkg/apis/auth/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeIngressAuths implements IngressAuthInterface
type FakeIngressAuths struct {
	Fake *FakeAuthV1
	ns   string
}

var ingressauthsResource = schema.GroupVersionResource{Group: "auth.bilrost.slok.dev", Version: "v1", Resource: "ingressauths"}

var ingressauthsKind = schema.GroupVersionKind{Group: "auth.bilrost.slok.dev", Version: "v1", Kind: "IngressAuth"}

// Get takes name of the ingressAuth, and returns the corresponding ingressAuth object, and an error if there is any.
func (c *FakeIngressAuths) Get(ctx context.Context, name string, options v1.GetOptions) (result *authv1.IngressAuth, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(ingressauthsResource, c.ns, name), &authv1.IngressAuth{})

	if obj == nil {
		return nil, err
	}
	return obj.(*authv1.IngressAuth), err
}

// List takes label and field selectors, and returns the list of IngressAuths that match those selectors.
func (c *FakeIngressAuths) List(ctx context.Context, opts v1.ListOptions) (result *authv1.IngressAuthList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(ingressauthsResource, ingressauthsKind, c.ns, opts), &authv1.IngressAuthList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &authv1.IngressAuthList{ListMeta: obj.(*authv1.IngressAuthList).ListMeta}
	for _, item := range obj.(*authv1.IngressAuthList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested ingressAuths.
func (c *FakeIngressAuths) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(ingressauthsResource, c.ns, opts))

}

// Create takes the representation of a ingressAuth and creates it.  Returns the server's representation of the ingressAuth, and an error, if there is any.
func (c *FakeIngressAuths) Create(ctx context.Context, ingressAuth *authv1.IngressAuth, opts v1.CreateOptions) (result *authv1.IngressAuth, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(ingressauthsResource, c.ns, ingressAuth), &authv1.IngressAuth{})

	if obj == nil {
		return nil, err
	}
	return obj.(*authv1.IngressAuth), err
}

// Update takes the representation of a ingressAuth and updates it. Returns the server's representation of the ingressAuth, and an error, if there is any.
func (c *FakeIngressAuths) Update(ctx context.Context, ingressAuth *authv1.IngressAuth, opts v1.UpdateOptions) (result *authv1.IngressAuth, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(ingressauthsResource, c.ns, ingressAuth), &authv1.IngressAuth{})

	if obj == nil {
		return nil, err
	}
	return obj.(*authv1.IngressAuth), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeIngressAuths) UpdateStatus(ctx context.Context, ingressAuth *authv1.IngressAuth, opts v1.UpdateOptions) (*authv1.IngressAuth, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(ingressauthsResource, "status", c.ns, ingressAuth), &authv1.IngressAuth{})

	if obj == nil {
		return nil, err
	}
	return obj.(*authv1.IngressAuth), err
}

// Delete takes name of the ingressAuth and deletes it. Returns an error if one occurs.
func (c *FakeIngressAuths) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteActionWithOptions(ingressauthsResource, c.ns, name, opts), &authv1.IngressAuth{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeIngressAuths) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(ingressauthsResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &authv1.IngressAuthList{})
	return err
}

// Patch applies the patch and returns the patched ingressAuth.
func (c *FakeIngressAuths) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *authv1.IngressAuth, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(ingressauthsResource, c.ns, name, pt, data, subresources...), &authv1.IngressAuth{})

	if obj == nil {
		return nil, err
	}
	return obj.(*authv1.IngressAuth), err
}
